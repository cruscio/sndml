<doc name="configuration" title="Configuration">
<h2>Command Line Options</h2>
<p>You must specify either the 
<code>-f </code> or the <code>-js </code>
command line option.
</p>
<table>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
<tr>
<td><join><code>-p </code> <var>filename</var></join></td>
<td><join>Specify an alternate name for properties file.
The default name is <code>datapump.properties</code></join></td>
</tr>
<tr>
<td><join><code>-f </code> <var>filename</var></join></td>
<td><join>Read and execute commands from a script file.
Refer to <page name="scripts">scripts</page> for details.</join></td>
</tr>
<tr>
<td><join><code>-js </code> <var>jobsetname</var></join></td>
<td><join>Reset and execute all jobs in the specified jobset.</join></td>
</tr>
<tr>
<td><join><code>-js </code> <var>jobsetname</var> <code> -resume</code></join></td>
<td><join>Resume processing of all jobs in the specified jobset.</join></td>
</tr>
<tr>
<td><code>-cancel</code></td>
<td>Cancel all executing jobs.</td>
</tr>
</table>


<h2 name="properties">datapump.properties</h2>
<p>This file must be in a CLASSPATH directory or specified on the command line
using the <code>-p</code> <var>filename</var> option.</p>
<table>
<tr>
<th>Property</th>
<th>Required</th>
<th>Default</th>
<th>Description</th>
</tr>
<tr>
<td>servicenow.url</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td>URL of the ServiceNow instance</td>
</tr>
<tr>
<td>servicenow.username</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td></td>
</tr>
<tr>
<td>servicenow.password</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td></td>
</tr>
<tr>
<td>pumper.sql.url</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td>JDBC URL for the destination database.</td>
</tr>
<tr>
<td>pumper.sql.username</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td><join>Username used to connect to the destination database. 
This user must have CREATE TABLE role.</join></td>
</tr>
<tr>
<td>pumper.sql.password</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td></td>
</tr>
<tr>
<td>pumper.sql.dialect</td>
<td><b>Yes</b></td>
<td><i>none</i></td>
<td><join>References a section in the <b>sqltemplates.xml</b> file. 
Possible values are <b>oracle1</b>, <b>oracle2</b> or <b>mysql1</b>.</join></td>
</tr>
<tr>
<td>pumper.sql.autocreate</td>
<td>No</td>
<td>true</td>
<td><join>
Indicates whether or not the application should automatically create tables 
as necessary in the destination database.</join></td>
</tr>
<tr>
<td>servicenow.chunksize</td>
<td>No</td>
<td>100</td>
<td><join>Records will be read from ServiceNow 100 rows at a time 
unless this property is overridden. 
The maximum permitted value is 250.</join></td>
</tr>
<tr>
<td>servicenow.<i>tablename</i>.chunksize</td>
<td>No</td>
<td><i>none</i></td>
<td><join>Allows the chunksize to be overridden for a specific table. 
The maximum permitted value is 250. 
Performance can be improved by using a larger chunksize for tables with short records.</join><br/>
<b>Example:</b><br/>
<code>servicenow.cmdb_rel_ci.chunksize=250</code></td>
</tr>
<tr>
<td>pumper.check_readable</td>
<td>No</td>
<td>true</td>
<td>The Web Services API does not enable the application to distinguish between a ServiceNow table that is empty versus one that is inaccessible for security reasons. If this property is true, then the application will check at startup to verify that at least one record can  be read from each table. If a table appears to be empty (<i>i.e.</i> no records can be read) then an exception will be thrown.</td>
</tr>
<tr>
<td>pumper.check_at_end</td>
<td>No</td>
<td>true</td>
<td>This property is only applicable if <b>Use Keys</b> is set to false for a particular Load operation. In this case the application uses <b>__first_row</b> and <b>__last_row</b> to window the <b>getRecords</b> Web Services calls. If <b>check_at_end</b> is true then the reading will stop as soon as an empty result set is returned. If <b>check_at_end</b> is false then reading will stop as soon as a result set returns fewer than the table chunk size</td>
</tr>
<tr>
<td>pumper.signal_file</td>
<td>No</td>
<td><i>none</i></td>
<td>Used to cleanly terminate the application while it is running. This is the name of a local file. If specified, the file (if it exists) will be removed when application starts and the application will continuously check for the existence of the file. If the application detects the existence of the file it will throw an Interrupted Exception and terminate.</td>
</tr>
</table>

<h2 name="sqltemplates">sqltemplates.xml</h2>
<p>This file contains information necessary to generate SQL statements. This file must be in a
CLASSPATH directory. Included in this file are</p>
<ul>
<li>Properties that control whether column names should upper case or lower case and whether
or not they should be in quotes</li>
<li>Session initialization statements</li>
<li>Data type mappings that specify the SQL data type for each ServiceNow data type</li>
<li>Templates for the actual SQL statements (CREATE TABLE, INSERT, UPDATE, etc.)</li>
<li>Field name mappings</li>
</ul>
<p>The SQL Templates file is divided into dialects. Three dialects are included.</p>
<ul>
<li><join><b>oracle1</b> - Oracle data types. 
Strings over 4000 characters are generated as CLOBs.
Column names are quoted allowing reserved words to be used as column names.</join></li>
<li><join><b>oracle2</b> - 
Column names are not quoted.  Instead an underscore is appended to any column name 
which corresponds to an Oracle reserved word. 
So, for example, "number" becomes "number_".
Strings over 4000 characters are generated as VARCHAR2(4000).
</join></li>
<li><join><b>mysql1</b> - MySQL data types. Column names are quoted. This dialect has not been
extensively tested.</join></li>
</ul>
<p>This file should not require modification unless the data types are wrong or the field name
mappings need to be modified.</p>

<h2 name="log4j">log4j.properties</h2>
<p>This file must be in a CLASSPATH directory. It contains logging configuration.</p>
<p>For the syntax of Log4J configuration files please refer to 
<link>http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PropertyConfigurator.html</link>
</p>
<p>The names of loggers in the "soap" package will be prefixed with "ServiceNow". The names of
loggers in the "datapump" package will be prefixed with "DataPump". Most loggers for the SOAP
package are NOT based on the class name. Instead, there are two loggers for each table, named
as follows:</p>
<ul>
<li>ServiceNow.Request.<i><b>tablename</b></i></li>
<li>ServiceNow.Response.<i><b>tablename</b></i></li>
</ul>
<p>Diagnostic information prior to the SOAP call will be written to the Request logger.
Diagnostic information after the SOAP call will be written to the Response logger. </p>
<p>In general, logger levels are as follows</p>
<table>
<tr>
<th>Level</th>
<th>Description</th>
</tr>
<tr>
<td>FATAL</td>
<td>Suppress warning messages (not recommended)</td>
</tr>
<tr>
<td>WARN</td>
<td>Show warning messages</td>
</tr>
<tr>
<td>INFO</td>
<td>Show one line per SOAP or Database call</td>
</tr>
<tr>
<td>DEBUG</td>
<td>Show XML sent and received</td>
</tr>
<tr>
<td>TRACE</td>
<td><join>Field level diagnostics 
(these are extremely verbose and should only be used for debugging)</join></td>
</tr>
</table>
<p>The following settings are reasonable defaults.</p>
<pre>
log4j.rootLogger=INFO, C1
log4j.logger.DataPump=INFO
log4j.logger.ServiceNow=WARN
log4j.logger.ServiceNow.Request=WARN
log4j.logger.ServiceNow.Response=WARN

# C1 is a ConsoleAppender which outputs to System.out
log4j.appender.C1=org.apache.log4j.ConsoleAppender
log4j.appender.C1.layout=org.apache.log4j.PatternLayout
log4j.appender.C1.layout.ConversionPattern=%p %c %m%n
</pre>
<p>The following tables are accessed frequently, so high logger levels are recommended for
normal processing.</p>
<pre>
log4j.logger.ServiceNow.Request.u_datapump_jobset=WARN
log4j.logger.ServiceNow.Response.u_datapump_jobset=WARN
log4j.logger.ServiceNow.Request.u_datapump_job=WARN
log4j.logger.ServiceNow.Response.u_datapump_job=WARN
log4j.logger.ServiceNow.Request.u_m2m_datapump_jobs=WARN
log4j.logger.ServiceNow.Response.u_m2m_datapump_jobs=WARN
log4j.logger.ServiceNow.Request.sys_db_object=WARN
log4j.logger.ServiceNow.Response.sys_db_object=WARN
log4j.logger.ServiceNow.Request.sys_dictionary=WARN
log4j.logger.ServiceNow.Response.sys_dictionary=WARN
</pre>

</doc>
